" kerkerj's .vimrc, based on spf13-vim

"set termguicolors

" =========================
" Encoding Settings
" =========================

set encoding=utf-8
set fileencodings=utf-8,chinese,latin-1
set fileencoding=utf-8
" source $VIMRUNTIME/delmenu.vim
" source $VIMRUNTIME/menu.vim


" =========================
" General Settings
" =========================

set nospell
set nocompatible    " not compatible with the old-fashion vi mode
set bs=2            " allow backspacing over everything in insert mode
set history=50      " keep 50 lines of command line history
set ruler           " show the cursor position all the time
set autoread        " auto read when file is changed from outside
set nu              " display line number
set ts=2            " tabstop 2
set wak=no          " disable GUI alt menu
set noswapfile
" set list listchars=tab:»·,trail:·

set shell=/bin/zsh

filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

retab " this will cause all existing tabs to be expanded

" --- auto reload vimrc when editing it
autocmd! bufwritepost .vimrc source ~/.vimrc

syntax on       " syntax highlight
set hlsearch        " search highlighting

set clipboard=unnamed   " yank to the system register (*) by default
set showmatch           " Cursor shows matching ) and }
set showmode            " Show current mode
set wildchar=<TAB>      " start wild expansion in the command line using <TAB>
set wildmenu            " wild char completion menu

" --- ignore these files while expanding wild chars
set wildignore=*.o,*.class,*.pyc

set autoindent      " auto indentation
set smartindent     " smart indentation
set incsearch       " incremental search
set nobackup        " no *~ backup files
set copyindent      " copy the previous indentation on autoindenting
set ignorecase      " ignore case when searching
set smartcase       " ignore case if search pattern is all lowercase,case-sensitive otherwise
set smarttab        " insert tabs on the start of a line according to context

" --- Disable sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" --- TAB setting{
set expandtab        "replace <TAB> with spaces
au FileType Makefile setlocal softtabstop=4 shiftwidth=4 noexpandtab
"}

" --- Highlight trailing whitespaces
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" ---  Remove all trailing whitespace by pressing F2
nnoremap <F2> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>"

" Set jj as <ESC>
imap jj <Esc>

" --- Restore cursor to file position in previous editing session
"set viminfo='10,\"100,:20,%,n~/.viminfo
"set viminfo='10,\"100,:20,%,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

augroup COFFEESCRIPT
  autocmd BufRead,BufNewFile *.coffee set filetype=coffee
augroup END

" --- vim-indent-guide
let g:indent_guides_start_level = 2
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_guide_size = 1
let g:indent_guides_color_change_percent = 5
let g:indent_guides_auto_colors = 0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=235
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=235

" --- Ack.vim
if executable('ag')
  let g:ackprg = 'ag --vimgrep --skip-vcs-ignores --path-to-ignore ~/.agignore'
endif

" --- Startify
let g:startify_change_to_vcs_root = 1
let g:startify_custom_header = [
\ '                  MMMM88&&&&&&&',
\ '      *           MMM88&&&&&&&&',
\ '                  MMM88&&&&&&&&',
\ '                   MMM88&&&&&&',
\ '                    `MMM8&&&`      *',
\ '           |\___/|',
\ '           )     (             .',
\ '          =\     /=',
\ '            )===(       *',
\ '           /     \                  /|､',
\ '           |     |                （ﾟ､ ｡7',
\ '          /       \                 |､ ~＼',
\ '          \       /                 じし_,)ノ..',
\ '   _/\_/\_/\__  _/_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_/\_',
\ '   |  |  |  |( (  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |',
\ '   |  |  |  | ) ) |  |      _             _             _   |',
\ '   |  |  |  |(_(  |  |     | | _____ _ __| | _____ _ __(_)  |',
\ '   |  |  |  |  |  |  |     | |/ / _ \  __| |/ / _ \  __| |  |',
\ '   |  |  |  |  |  |  |     |   <  __/ |  |   <  __/ |  | |  |',
\ '   |  |  |  |  |  |  |     |_|\_\___|_|  |_|\_\___|_| _/ |  |',
\ '   |  |  |  |  |  |  |                                |__/  |',
\ '   ==========================================================',
\ '',
\ ]


" =========================
" Ruby/Javascripts Settings
" =========================
autocmd FileType go,rb,ruby,eruby,yaml,javascript,proto setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd BufNewFile,BufRead *.eyaml set filetype=yaml
autocmd BufNewFile,BufRead *.cap set filetype=ruby
autocmd BufNewFile,BufRead *.coffee set filetype=javascript

" =========================
" GolangSettings
" =========================
let g:go_fmt_command = "goimports"

" =========================
" Custom Commands
" =========================

" store session and restore it
map <F3> :mksession! ~/vim_session <cr> " Quick write session with F3
map <F4> :source ~/vim_session <cr>     " And load session with F4

" --- `F5` NERDTree toggle
nnoremap <silent><F5> :NERDTreeMirrorToggle<CR>

" --- `<F6>` Copy to osx clipboard
" map <F6> :w !pbcopy<CR><CR>

" --- `<F7>` tagbar toggle
nnoremap <silent><F7> :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:Tlist_Ctags_Cmd='/usr/local/bin/ctags' 

" --- `<leader>/` - Turn off search highlighting
" nmap <leader>/ :set hlsearch! hlsearch?<CR>

" --- `<leader>p` Toggles paste mode
" nmap <leader>p :set paste!<BAR>set paste?<CR>

" --- allow multiple indentation/deindentation in visual mode
" vnoremap < <gv
" vnoremap > >gv

" --- `<leader>n` Rename current file
" function! RenameFile()
"   let old_name = expand('%')
"   let new_name = input('New file name: ', expand('%'), 'file')
"   if new_name != '' && new_name != old_name
"     exec ':saveas ' . new_name
"     exec ':silent !rm ' . old_name
"     redraw!
"   endif
" endfunction
" map <leader>n :call RenameFile()<cr>

" --- `<leader>b` vim-buffergator
" let g:buffergator_viewport_split_policy = "B"
" let g:buffergator_suppress_keymaps="1"
" let g:buffergator_autodismiss_on_select=1
" let g:buffergator_split_size=12
" let g:buffergator_autoupdate=1
" map <leader>b :BuffergatorToggle<cr>

" --- vim-multiple-cursors
" Map start key separately from next key
" let g:multi_cursor_start_key='<F4>'"
" let g:multi_cursor_exit_from_insert_mode = 0

" --- Enable true color
" Install iTerm-nightly to use true color (I use brew cask to install.)
" And tell NVIM to enable true color
" https://github.com/morhetz/gruvbox/wiki/Terminal-specific#0-recommended-nvim_tui_enable_true_color1
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

" --- terminal color settings
"let g:gruvbox_italic=1
colorscheme gruvbox
" colorscheme base16-tomorrow
set background=dark

" Enable the list of buffers 
let g:airline#extensions#tabline#enabled = 1 
" Show just the filename 
let g:airline#extensions#tabline#fnamemod = ':t'

" For paste multiple times
xnoremap p pgvy

" Use Tab and arrow-key cycle through buffers
nnoremap <Tab><Left> :bp<CR>
nnoremap <Tab><Right> :bn<CR>
map <silent><cr> :noh<cr>


" ctrlp
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
if executable('rg')
  set grepprg=rg\ --color=never
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0
  let g:ctrlp_clear_cache_on_exit = 0
endif

"if executable('ag')
"  " Use Ag over Grep
"  " let g:ackprg = 'ag --vimgrep --skip-vcs-ignores --path-to-ignore ~/.ignore'
"  set grepprg=ag\ --nogroup\ --nocolor\ --skip-vcs-ignores
"  " Use ag in CtrlP for listing files.
"  " let g:ctrlp_user_command = 'ag %s -l --nocolor -g "" --vimgrep --skip-vcs-ignores --path-to-ignore ~/.ignore'
"  "
"  let g:ctrlp_user_command = 'ag %s --nocolor -g "" --vimgrep --skip-vcs-ignores --path-to-ignore ~/.agignore'
"  " Ag is fast enough that CtrlP doesn't need to cache
"  let g:ctrlp_use_caching = 1
"endif

let g:ctrlp_regexp = 1
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_prompt_mappings = { 'PrtAdd(".*")': ['<space>'] }
let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git|vendor\'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_switch_buffer = 0

" switch.vim
let g:switch_mapping = "-"

" --- vim-turbux from ash
" let g:no_turbux_mappings = 1
" au Filetype ruby
"     \ map <leader>t <Plug>SendTestToTmux |
"     \ map <leader>r <Plug>SendFocusedTestToTmux |
"     \ let g:turbux_command_rspec  = 'zeus rspec'        " default: rspec

" au FileType go map <leader>t :Tmux go test<CR>

" fzf
" If installed using Homebrew
set rtp+=/usr/local/opt/fzf

" RSpec.vim mappings
let g:rspec_runner = "os_x_iterm2"
map <Leader>ct :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
let g:rspec_command = 'call Send_to_Tmux("rspec {spec}\n")'

" turbux
map <leader>r <Plug>SendFocusedTestToTmux
let g:turbux_command_rspec  = 'spring rspec'        " default: rspec

" ctags
" It tells Vim to look for a tags file in the directory of the current file, in the current directory and up and up until your $HOME
" (that's the meaning of the semicolon), stopping on the first hit.
set tags=./.tags,.tags;$HOME
" set autochdir

" Langurage server client
" use Plugin in .vimrc.bundle to download the repo
" and go to .vim/bundle/LanguageClient-neovim/, run bash install.sh
" set runtimepath+=~/.vim/bundle/LanguageClient-neovim

" Required for operations modifying multiple buffers like rename.
" set hidden
"    \ 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'],
" let g:LanguageClient_serverCommands = {
"     \ 'go': ['gopls']
"     \ }
" let g:go_def_mode='gopls'
" let g:go_info_mode='gopls'

" nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
" nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
" nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>

" set hcl file
autocmd BufRead,BufNewFile *.hcl set filetype=terraform


" eliminating delays on ESC in vim
set timeoutlen=1000 ttimeoutlen=0
